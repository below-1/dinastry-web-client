{"version":3,"sources":["../node_modules/symbol-observable/es/ponyfill.js","../node_modules/symbol-observable/es/index.js","../node_modules/is-observable/index.js","../node_modules/threads/dist/worker/implementation.browser.js","../node_modules/threads/dist/worker/index.js","../node_modules/threads/worker.js","../src/services/in_bound.js","../src/services/predict.js","../src/services/row_converter.js","../src/services/testing.js","../src/services/testing_thread.js"],"names":["symbolObservablePonyfill","root","result","Symbol","observable","self","window","global","module","Function","symbolObservable","require","default","exports","value","Boolean","in_bound","range","lower_bound_ok","upper_bound_ok","undefined","lower_bound","min","upper_bound","max","transform_attr","attr","cls_count","total","smooth","Object","keys","reduce","acc","k","create_predictor","summary","classes","modified_summary","cls","cls_summary","count","attributes","_attrs","forEach","attr_key","prob","input","map","c","attr_product","curr","parseInt","create_row_converter","criteria","row","kind","r","ranges","find","key","Error","build_sub_attribute","crit","subs","options","build_result_structure","data","criterias","d","_class","x","err","console","log","o","testing","row_converter","ratios","test_ratio","n_run","irun","all","n_test","Math","floor","length","test_data","train_data","summ","predictor","tp","fp","tn","fn","prec","recall","f1","run"],"mappings":"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","file":"testing_thread.6928392d.js","sourceRoot":"../public","sourcesContent":["export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","'use strict';\nconst symbolObservable = require('symbol-observable').default;\n\nmodule.exports = value => Boolean(value && value[symbolObservable] && value === value[symbolObservable]());\n","\"use strict\";\n/// <reference lib=\"dom\" />\n// tslint:disable no-shadowed-variable\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst isWorkerRuntime = function isWorkerRuntime() {\n    const isWindowContext = typeof self !== \"undefined\" && typeof Window !== \"undefined\" && self instanceof Window;\n    return typeof self !== \"undefined\" && self.postMessage && !isWindowContext ? true : false;\n};\nconst postMessageToMaster = function postMessageToMaster(data, transferList) {\n    self.postMessage(data, transferList);\n};\nconst subscribeToMasterMessages = function subscribeToMasterMessages(onMessage) {\n    const messageHandler = (messageEvent) => {\n        onMessage(messageEvent.data);\n    };\n    const unsubscribe = () => {\n        self.removeEventListener(\"message\", messageHandler);\n    };\n    self.addEventListener(\"message\", messageHandler);\n    return unsubscribe;\n};\nexports.default = {\n    isWorkerRuntime,\n    postMessageToMaster,\n    subscribeToMasterMessages\n};\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expose = exports.isWorkerRuntime = void 0;\nconst is_observable_1 = __importDefault(require(\"is-observable\"));\nconst common_1 = require(\"../common\");\nconst transferable_1 = require(\"../transferable\");\nconst messages_1 = require(\"../types/messages\");\nconst implementation_1 = __importDefault(require(\"./implementation\"));\nvar common_2 = require(\"../common\");\nObject.defineProperty(exports, \"registerSerializer\", { enumerable: true, get: function () { return common_2.registerSerializer; } });\nvar transferable_2 = require(\"../transferable\");\nObject.defineProperty(exports, \"Transfer\", { enumerable: true, get: function () { return transferable_2.Transfer; } });\n/** Returns `true` if this code is currently running in a worker. */\nexports.isWorkerRuntime = implementation_1.default.isWorkerRuntime;\nlet exposeCalled = false;\nconst activeSubscriptions = new Map();\nconst isMasterJobCancelMessage = (thing) => thing && thing.type === messages_1.MasterMessageType.cancel;\nconst isMasterJobRunMessage = (thing) => thing && thing.type === messages_1.MasterMessageType.run;\n/**\n * There are issues with `is-observable` not recognizing zen-observable's instances.\n * We are using `observable-fns`, but it's based on zen-observable, too.\n */\nconst isObservable = (thing) => is_observable_1.default(thing) || isZenObservable(thing);\nfunction isZenObservable(thing) {\n    return thing && typeof thing === \"object\" && typeof thing.subscribe === \"function\";\n}\nfunction deconstructTransfer(thing) {\n    return transferable_1.isTransferDescriptor(thing)\n        ? { payload: thing.send, transferables: thing.transferables }\n        : { payload: thing, transferables: undefined };\n}\nfunction postFunctionInitMessage() {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"function\"\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postModuleInitMessage(methodNames) {\n    const initMessage = {\n        type: messages_1.WorkerMessageType.init,\n        exposed: {\n            type: \"module\",\n            methods: methodNames\n        }\n    };\n    implementation_1.default.postMessageToMaster(initMessage);\n}\nfunction postJobErrorMessage(uid, rawError) {\n    const { payload: error, transferables } = deconstructTransfer(rawError);\n    const errorMessage = {\n        type: messages_1.WorkerMessageType.error,\n        uid,\n        error: common_1.serialize(error)\n    };\n    implementation_1.default.postMessageToMaster(errorMessage, transferables);\n}\nfunction postJobResultMessage(uid, completed, resultValue) {\n    const { payload, transferables } = deconstructTransfer(resultValue);\n    const resultMessage = {\n        type: messages_1.WorkerMessageType.result,\n        uid,\n        complete: completed ? true : undefined,\n        payload\n    };\n    implementation_1.default.postMessageToMaster(resultMessage, transferables);\n}\nfunction postJobStartMessage(uid, resultType) {\n    const startMessage = {\n        type: messages_1.WorkerMessageType.running,\n        uid,\n        resultType\n    };\n    implementation_1.default.postMessageToMaster(startMessage);\n}\nfunction postUncaughtErrorMessage(error) {\n    try {\n        const errorMessage = {\n            type: messages_1.WorkerMessageType.uncaughtError,\n            error: common_1.serialize(error)\n        };\n        implementation_1.default.postMessageToMaster(errorMessage);\n    }\n    catch (subError) {\n        // tslint:disable-next-line no-console\n        console.error(\"Not reporting uncaught error back to master thread as it \" +\n            \"occured while reporting an uncaught error already.\" +\n            \"\\nLatest error:\", subError, \"\\nOriginal error:\", error);\n    }\n}\nfunction runFunction(jobUID, fn, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let syncResult;\n        try {\n            syncResult = fn(...args);\n        }\n        catch (error) {\n            return postJobErrorMessage(jobUID, error);\n        }\n        const resultType = isObservable(syncResult) ? \"observable\" : \"promise\";\n        postJobStartMessage(jobUID, resultType);\n        if (isObservable(syncResult)) {\n            const subscription = syncResult.subscribe(value => postJobResultMessage(jobUID, false, common_1.serialize(value)), error => {\n                postJobErrorMessage(jobUID, common_1.serialize(error));\n                activeSubscriptions.delete(jobUID);\n            }, () => {\n                postJobResultMessage(jobUID, true);\n                activeSubscriptions.delete(jobUID);\n            });\n            activeSubscriptions.set(jobUID, subscription);\n        }\n        else {\n            try {\n                const result = yield syncResult;\n                postJobResultMessage(jobUID, true, common_1.serialize(result));\n            }\n            catch (error) {\n                postJobErrorMessage(jobUID, common_1.serialize(error));\n            }\n        }\n    });\n}\n/**\n * Expose a function or a module (an object whose values are functions)\n * to the main thread. Must be called exactly once in every worker thread\n * to signal its API to the main thread.\n *\n * @param exposed Function or object whose values are functions\n */\nfunction expose(exposed) {\n    if (!implementation_1.default.isWorkerRuntime()) {\n        throw Error(\"expose() called in the master thread.\");\n    }\n    if (exposeCalled) {\n        throw Error(\"expose() called more than once. This is not possible. Pass an object to expose() if you want to expose multiple functions.\");\n    }\n    exposeCalled = true;\n    if (typeof exposed === \"function\") {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && !messageData.method) {\n                runFunction(messageData.uid, exposed, messageData.args.map(common_1.deserialize));\n            }\n        });\n        postFunctionInitMessage();\n    }\n    else if (typeof exposed === \"object\" && exposed) {\n        implementation_1.default.subscribeToMasterMessages(messageData => {\n            if (isMasterJobRunMessage(messageData) && messageData.method) {\n                runFunction(messageData.uid, exposed[messageData.method], messageData.args.map(common_1.deserialize));\n            }\n        });\n        const methodNames = Object.keys(exposed).filter(key => typeof exposed[key] === \"function\");\n        postModuleInitMessage(methodNames);\n    }\n    else {\n        throw Error(`Invalid argument passed to expose(). Expected a function or an object, got: ${exposed}`);\n    }\n    implementation_1.default.subscribeToMasterMessages(messageData => {\n        if (isMasterJobCancelMessage(messageData)) {\n            const jobUID = messageData.uid;\n            const subscription = activeSubscriptions.get(jobUID);\n            if (subscription) {\n                subscription.unsubscribe();\n                activeSubscriptions.delete(jobUID);\n            }\n        }\n    });\n}\nexports.expose = expose;\nif (typeof self !== \"undefined\" && typeof self.addEventListener === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    self.addEventListener(\"error\", event => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(event.error || event), 250);\n    });\n    self.addEventListener(\"unhandledrejection\", event => {\n        const error = event.reason;\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\nif (typeof process !== \"undefined\" && typeof process.on === \"function\" && implementation_1.default.isWorkerRuntime()) {\n    process.on(\"uncaughtException\", (error) => {\n        // Post with some delay, so the master had some time to subscribe to messages\n        setTimeout(() => postUncaughtErrorMessage(error), 250);\n    });\n    process.on(\"unhandledRejection\", (error) => {\n        if (error && typeof error.message === \"string\") {\n            // Post with some delay, so the master had some time to subscribe to messages\n            setTimeout(() => postUncaughtErrorMessage(error), 250);\n        }\n    });\n}\n","module.exports = require(\"./dist/worker/index\")\n","export default function in_bound (range, value) {\n  // Lower bound\n  let lower_bound_ok = false;\n  let upper_bound_ok = false;\n\n  if (range.lower_bound !== undefined && range.min !== undefined) {\n    if (range.lower_bound == '<') {\n      if (range.min < value) {\n        lower_bound_ok = true;\n      }\n    } else {\n      if (range.min <= value) {\n        lower_bound_ok = true;\n      }\n    }\n  } else {\n    lower_bound_ok = true;\n  }\n\n  if (range.upper_bound !== undefined && range.max !== undefined) {\n    if (range.upper_bound == '<') {\n      if (value < range.max) {\n        upper_bound_ok = true;\n      }\n    } else {\n      if (value <= range.max) {\n        upper_bound_ok = true;\n      }\n    }\n  } else {\n    upper_bound_ok = true;\n  }\n\n  return lower_bound_ok && upper_bound_ok;\n}","import { maxBy } from 'lodash';\nimport in_bound from './in_bound';\n\nfunction transform_attr ({ attr, cls_count, total, smooth }) {\n  return Object.keys(attr).reduce((acc, k) => {\n    acc[k] = (attr[k] * 1.0 + 1) / (cls_count + (smooth * total));\n    return acc;\n  }, {})\n}\n\nexport function create_predictor ({ summary, total, smooth }) {\n  const classes = Object.keys(summary)\n  const modified_summary = classes.reduce((acc, cls) => {\n    let cls_summary = summary[cls]\n    let { count, attributes } = cls_summary;\n    let _attrs = {};\n    Object.keys(attributes).forEach(attr_key => {\n      const attr = attributes[attr_key];\n      _attrs[attr_key] = transform_attr({ \n        attr, \n        cls_count: count, \n        total, \n        smooth \n      });\n    });\n    // console.log(`total = ${total}`);\n    // console.log(`count = ${count}`);\n    return {\n      ...acc,\n      [cls]: { \n        prob: count * 1.0 / total,\n        attributes: _attrs \n      }\n    }\n  }, {});\n\n  // console.log('modified summary');\n  // console.log(modified_summary);\n\n  return function (input) {\n    // console.log(classes);\n    return classes\n      .map(c => {\n        const attributes = modified_summary[c].attributes;\n        const attr_keys = Object.keys(attributes);\n        \n        const attr_product = attr_keys\n          .map(attr_key => attributes[attr_key][input[attr_key]])\n          .reduce((acc, curr) => acc * curr, 1);\n\n        // console.log(modified_summary[c]);\n        const result = {\n          cls: parseInt(c),\n          prob: attr_product * modified_summary[c].prob\n        };\n\n        // console.log(result);\n\n        return result;\n      })\n      .reduce((acc, curr) => {\n        // console.log(curr);\n        if (curr.prob > acc.prob) return curr;\n        return acc;\n      }, { cls: -1, prob: -1 })\n  }\n}\n","import in_bound from './in_bound';\n\nexport default function create_row_converter (criteria) {\n  return function (row) {\n    let result = {};\n    criteria.forEach(c => {\n      if (c.kind == 'numeric') {\n        const r = c.ranges.find(r => in_bound(r, row[c.key]))\n        if (!r) {\n          throw new Error(`unknown range for value: [${c.key}:${row[c.key]}]`);\n        }\n        result[c.key] = r.value;\n      } else if (c.kind == 'categorial') {\n        result[c.key] = row[c.key]\n      } else {\n        throw new Error(`unknown criteria type: ${c.kind}`);\n      }\n    })\n    return result;\n  }\n}","import { shuffle, take, slice, range } from 'lodash';\nimport { create_predictor } from './predict.js';\nimport create_row_converter from 'dinastry/services/row_converter';\n\nexport function in_bound (range, value) {\n  // Lower bound\n  let lower_bound_ok = false;\n  let upper_bound_ok = false;\n\n  if (range.lower_bound !== undefined && range.min !== undefined) {\n    if (range.lower_bound == '<') {\n      if (range.min < value) {\n        lower_bound_ok = true;\n      }\n    } else {\n      if (range.min <= value) {\n        lower_bound_ok = true;\n      }\n    }\n  } else {\n    lower_bound_ok = true;\n  }\n\n  if (range.upper_bound !== undefined && range.max !== undefined) {\n    if (range.upper_bound == '<') {\n      if (value < range.max) {\n        upper_bound_ok = true;\n      }\n    } else {\n      if (value <= range.max) {\n        upper_bound_ok = true;\n      }\n    }\n  } else {\n    upper_bound_ok = true;\n  }\n\n  return lower_bound_ok && upper_bound_ok;\n}\n\nfunction build_sub_attribute (crit) {\n  const subs = crit.kind == 'numeric' ? crit.ranges : crit.options;\n  return subs.reduce((acc, curr) => {\n    acc[curr.value] = 0;\n    return acc;\n  }, {});\n}\n\nfunction build_result_structure (criteria) {\n  let result = {\n    1: { count: 0, attributes: {} },\n    0: { count: 0, attributes: {} }\n  };\n  criteria.forEach(c => {\n    result[1].attributes[c.key] = build_sub_attribute(c);\n    result[0].attributes[c.key] = build_sub_attribute(c);\n  })\n  return result;\n}\n\nfunction summary({ data, criterias }) {\n\tlet result = build_result_structure(criterias);\n\tconst keys = criterias.map(c => c.key);\n\tdata.forEach(d => {\n\t\tresult[d._class].count += 1\n\t\tcriterias.forEach(c => {\n\t\t\tconst x = d[c.key];\n\t\t\tif (c.kind == 'numeric') {\n        const range = c.ranges.find(range => in_bound(range, x));\n        try {\n          result[d._class].attributes[c.key][range.value] += 1;\n        } catch (err) {\n          console.log(c)\n          console.log(x)\n          throw err;\n        }\n      } else {\n        const o = c.options.find(o => o.value == x);\n        try {\n          result[d._class].attributes[c.key][o.value] += 1;\n        } catch (err) {\n          console.log(c)\n          console.log(x)\n          throw err;\n        }\n      }\n\t\t})\n\t})\n\treturn result;\n}\n\nexport default function testing ({ data, criterias }) {\n\tconst ratios = [0.1, 0.2, 0.3];\n\tconst n_run = 10;\n\tconst row_converter = create_row_converter(criterias);\n\treturn ratios.map(test_ratio => {\n\t\treturn range(n_run).map(irun => {\n\t\t\tlet all = shuffle(data);\n\t\t  const n_test = Math.floor(all.length * test_ratio);\n\t\t  const test_data = slice(all, 0, n_test);\n\t\t  const train_data = slice(all, n_test);\n\t\t\tconst summ = summary({ data: train_data, criterias });\n\t\t\tconst predictor = create_predictor({ summary: summ, smooth: 1, total: train_data.length });\n\n\t\t\tlet tp = 0;\n\t\t\tlet fp = 0;\n\t\t\tlet tn = 0;\n\t\t\tlet fn = 0;\n\n\t\t\ttest_data.forEach(d => {\n\t\t\t\tconst input = row_converter(d);\n\t      const r = predictor(input);\n\n\t      if (d._class == 1 && r.cls == 1) {\n\t        tp += 1;\n\t      } else if (d._class == 0 && r.cls == 1) {\n\t        fp += 1;\n\t      } else if (d._class == 0 && r.cls == 0) {\n\t        tn += 1;\n\t      } else if (d._class == 1 && r.cls == 0) {\n\t        fn += 1;\n\t      }\n\t\t\t})\n\n\t\t\tconst acc = ((tp + tn) / (test_data.length)) * 100;\n\t    const prec = (tp / (tp + fp)) * 100;\n\t    const recall = (tp / (tp + fn)) * 100;\n\t    const f1 = (2 * prec * recall) / (prec + recall);\n\n\t\t\treturn {\n\t\t\t\ttp, fp, tn, fn,\n\t\t\t\tacc, prec, recall, f1\n\t\t\t};\n\t\t})\n\t})\n\t// console.log(data.length);\n\t// console.log(acc);\n  // console.log(`length of test ${test_data.length}`);\n  // console.log(`length of train ${train_data.length}`);\n}","import { expose } from \"threads/worker\"\nimport testing from './testing.js';\n\nexpose({\n\trun: testing\n})"]}